*/
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
*/

*/
We will need to know how many letters in our substring that we need to replace.
To find out the lettersToReplace = (end - start + 1) - mostFreqLetter;
Pretty much you take the size of the window minus the most freq letter that is in the current window.

Now that we know how many characters that need to be replaced in our window, we can deduce that if lettersToReplace > k than the window is invalid and we decrease the window size from the left.
*/

class Solution {
    public int characterReplacement(String s, int k) {
        int common=0,left=0,maxLen=0;
        int[] count=new int[26];
        
        for(int i=0;i<s.length();i++)
        {
            count[s.charAt(i)-'A']++;
            common=Math.max(common,count[s.charAt(i)-'A']);
            
            int change=i-left+1-common;
            if(change > k)
            {
                count[s.charAt(left)-'A']--;
                left++;
            }
            
            maxLen=Math.max(maxLen,i-left+1);
        }
        
        return maxLen;
        
    }
}
