*/
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
/*

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++)
        {
            if(i!=0 && nums[i]==nums[i-1])
                    continue;
            int start=i+1;
            int end=nums.length-1;
            
            while(start<end)
            {
                
                int sum=nums[i]+nums[start]+nums[end];
                if(sum==0)
                {
                    int same;
                    res.add(Arrays.asList(nums[i],nums[start],nums[end]));
                    
                    same=nums[start];
                    while(start<end && nums[start]==same) start++;
                    same=nums[end];
                    while(start<end && nums[end]==same) end--;
                }
                else if(sum>0)
                {
                    end--;
                }
                else
                    start++;
            }
        }
        return res;
    }
}
